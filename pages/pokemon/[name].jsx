import Head from "next/head";
import Image from "next/image";
import Navbar from "../../components/Navbar";
import React, { useState, useEffect } from "react";
import axios from "axios";
import Link from "next/link";
import { useRouter } from "next/router";

const types = {
  normal: ["#EAEADE", "#ACA974", "#ACA974"],
  fire: ["#F8B80E", "#9b5510", "#F67F0B"],
  water: ["#6390F0", "#08517A", "#6898F7"],
  electric: ["#FFFA24", "#969101", "#FFFA24"],
  grass: ["#7AC74C", "#204000", "#7AC74C"],
  ice: ["#96D9D6", "#1995A1", "#96D9D6"],
  fighting: ["#C22E28", "#800B11", "#C22E28"],
  poison: ["#A33EA1", "#611380", "#A33EA1"],
  ground: ["#EDE293", "#BFAC21", "#BFAC21"],
  flying: ["#A98FF3", "#085764", "#A98FF3"],
  psychic: ["#F95587", "#8A0532", "#F95587"],
  bug: ["#D9FE9E", "#A6B91A", "#D9FE9E"],
  rock: ["#B6A136", "#470426", "#B6A136"],
  ghost: ["#735797", "#472B53", "#735797"],
  dragon: ["#6F35FC", "#29036A", "#6F35FC"],
  dark: ["#705746", "#2D221C", "#705746"],
  steel: ["#B7B7CE", "#454545", "#B7B7CE"],
  fairy: ["#FDD1E0", "#D685AD", "#FDD1E0"],
};

function capitalize(str) {
  return str ? str.charAt(0).toUpperCase() + str.slice(1) : "";
}

function hexToGrayscale(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? 0.2126 * parseInt(result[1], 16) +
        0.7152 * parseInt(result[2], 16) +
        0.0722 * parseInt(result[3], 16) >=
      128
      ? "text-black"
      : "text-white"
    : null;
}

function meterToFeet(meter) {
  let m1 = meter * 3.2808;
  let s1 = Math.floor(m1);
  let s2 = Math.round(12 * (m1 - s1), 2);
  return s1 + "'" + s2 + '"';
}
export default function PokemonDetails() {
  const router = useRouter();
  const [pokemon, setPokemon] = useState([]);
  const [details, setDetails] = useState([]);
  const { name } = router.query;

  useEffect(() => {
    if (router.isReady) {
      axios
        .get(`https://pokeapi.co/api/v2/pokemon/${name}`)
        .then((res) => {
          const getPokemon = async () => {
            try {
              setPokemon(res.data);
              axios.get(res.data.species.url).then((res) => {
                const getDetails = async () => {
                  setDetails(res.data);
                };
                getDetails();
              });
            } catch (err) {
              console.log(err);
            }
          };
          getPokemon();
        })
        .catch((err) => console.log(err));
    }
  }, [router.isReady]);

  return (
    <div>
      <Head>
        <title>PokéStop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* <div className="bg-[url('../public/assets/background.jpg')] bg-no-repeat bg-cover fixed min-h-screen w-screen -z-50"></div> */}
      <div
        style={{
          background: `${
            pokemon.types &&
            `linear-gradient(45deg, ${types[pokemon.types[0].type.name][1]}, ${
              types[pokemon.types[0].type.name][0]
            })`
          }`,
        }}
        className="bg-no-repeat bg-cover fixed min-h-screen w-screen -z-50"
      ></div>

      <main>
        <div className={`h-[150px] flex items-center justify-start mx-16`}>
          <Link href="/">
            <a
              className={
                pokemon.types &&
                `text-5xl ${hexToGrayscale(
                  types[pokemon.types[0].type.name][1]
                )}`
              }
            >
              PokéStop
            </a>
          </Link>
        </div>
        <section
          className={
            pokemon.types &&
            `my-12 mx-16 ${hexToGrayscale(
              types[pokemon.types[0].type.name][1]
            )}`
          }
        >
          <div className="">
            <div className="flex items-center">
              {/* Nama Pokemon */}
              <h1 className="text-8xl">
                {pokemon && capitalize(pokemon.name)}
              </h1>
              {/* Icon */}
              <Image
                src={`https://www.cpokemon.com/pokes/shuffle/${pokemon.id}.png`}
                height={100}
                width={100}
                alt={pokemon.name}
              />
            </div>
            {/* Tipe Pokemon */}
            <div className="flex gap-2">
              {pokemon.types &&
                pokemon.types.map((type) => (
                  <div
                    key={type.type.name}
                    className="flex flex-col items-center m-2"
                  >
                    <Image
                      src={`https://raw.githubusercontent.com/PokeMiners/pogo_assets/master/Images/Types/POKEMON_TYPE_${type.type.name.toUpperCase()}.png`}
                      height={50}
                      width={50}
                      alt={type.type.name}
                    />
                    <h3 className="text-2xl">{capitalize(type.type.name)}</h3>
                  </div>
                ))}
            </div>
          </div>

          <div className="flex justify-center w-full rounded-full pb-20">
            <h1 className="-mt-32 absolute text-[500px] text-opacity-10 text-white">
              #{("000" + pokemon.id).slice(-3)}
            </h1>
            <Image
              src={`https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/${(
                "000" + pokemon.id
              ).slice(-3)}.png`}
              height={500}
              width={500}
              alt={pokemon.name}
            />
          </div>
        </section>

        <section className="p-16 bg-[#fff] shadow-2xl  rounded-t-[50px]">
          <h2 className="text-xl">
            {details.flavor_text_entries &&
              details.flavor_text_entries[0].flavor_text.replace("\f", "\n")}
          </h2>
          {/* <table>
            <tbody>
              <tr>
                <th>Weight</th>
                <td>
                  {pokemon.weight / 10} kg (
                  {((pokemon.weight / 10) * 2.2046).toFixed(1)} lbs)
                </td>
              </tr>
              <tr>
                <th>Height</th>
                <td>
                  {pokemon.height / 10} m ({meterToFeet(pokemon.height / 10)})
                </td>
              </tr>
              <tr>
                <th>Shape</th>
                <td>{capitalize(details.shape.name)}</td>
              </tr>
              <tr>
                <th>Color</th>
                <td>{capitalize(details.color.name)}</td>
              </tr>
            </tbody>
          </table> */}
          {/* Base Stats */}
          {/* <div className="rounded-3xl p-4">
            <h2 className="text-5xl">Base Stats</h2>
            <table>
              <tbody>
                {pokemon.stats && pokemon.stats[0].stat.name}
                {pokemon.stats &&
                  pokemon.stats.map((stat) => (
                    <tr key={stat.stat.name}>
                      <th>{stat.stat.name}</th>
                      <td>{stat.base_stat}</td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div> */}
        </section>
      </main>

      <footer></footer>
    </div>
  );
}
